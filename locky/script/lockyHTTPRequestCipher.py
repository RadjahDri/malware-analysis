#!/usr/bin/python

import sys,md5

def ror(n, dec):
	n &= 0xFFFFFFFF
	return ((n >> dec) | (n << (32-dec))) & 0xFFFFFFFF

def rol(n, dec):
	return ((n << dec) | (n >> (32-dec))) & 0xFFFFFFFF

def hashMD5(strData):
	m = md5.new()
	m.update(strData)
	return m.digest()

def encryptHexa(plaintext):
	return "".join(map(lambda x:x[2:],map(hex,map(ord,encrypt(plaintext)))))

def encrypt(plaintext):
	integrityHash = hashMD5(plaintext)
	data = map(ord,integrityHash+plaintext)
	key = 0xCD43EF19
	for i in range(len(data)):
		currentChar = data[i]
		data[i] = (((ror(key, 5) & 0xFF) - rol(i, 0xD) & 0xFF) & 0xFF) ^ (data[i] & 0xFF)
		key = (rol(currentChar, i%32) + ror(key,1)) ^ (ror(i, 23) + 0x53702F68)
	return "".join(map(chr,data))

def decrypt(cipher):
	data = map(ord,cipher)
	key = 0xCD43EF19
	dec = []
	for i, e in enumerate(data):
		currentChar = data[i]
		dec.append((((ror(key, 5) & 0xFF) - rol(i, 0xD) & 0xFF) & 0xFF) ^ currentChar)
		key = (rol(dec[i], i%32) + ror(key,1)) ^ (ror(i, 23) + 0x53702F68)
	plaintext = "".join(map(chr,dec))
	if(plaintext[:16] != hashMD5(plaintext[16:])):
		print "Integrity error"
	return plaintext[16:]


if __name__=='__main__':
	if(len(sys.argv) != 2):
		print "Usage: "+sys.argv[0]+" plaintext"
		exit(0)

	plaintext = sys.argv[1]

	print "=== Plaintext ==="
	print plaintext
	print "=== Hexa(cipher(Plaintext)) ==="
	print encryptHexa(plaintext)
	print "=== Decrypt(cipher(Plaintext)) ==="
	print decrypt(encrypt(plaintext))

