#!/usr/bin/python

import sys,md5

def ror(n, dec):
	n &= 0xFFFFFFFF
	return ((n >> dec) | (n << (32-dec))) & 0xFFFFFFFF

def rol(n, dec):
	return ((n << dec) | (n >> (32-dec))) & 0xFFFFFFFF

def hashMD5(strData):
	m = md5.new()
	m.update(strData)
	return m.digest()

def decrypt(data):
	plaintext = ''
	key = 0xAFF49754;
	for i in range(len(data)):
		newChar = (((data[i] - i) & 0xFF) - rol(key, 3)) & 0xFF
		plaintext += chr(newChar)
		key = (key + (ror(newChar, 11) ^ rol(key, 5) ^ i) - 0x47CB0D2F) & 0xFFFFFFFF
	
	if(plaintext[:16] != hashMD5(plaintext[16:])):
		print "Integrity error"
	return plaintext[16:]

def encrypt(dataStr):
	integrityHash = hashMD5(dataStr)
	data = map(ord, integrityHash+dataStr)
	dataOut = []
	key = 0xAFF49754;
	for i in range(len(data)):
		oldChar = data[i]
		dataOut.append(((data[i] + rol(key, 3)) & 0xFF) + i)
		key = (key + (ror(oldChar, 11) ^ rol(key, 5) ^ i) - 0x47CB0D2F) & 0xFFFFFFFF
	return dataOut

def encryptHexa(dataStr):
	return "".join(map(lambda x:x[2:], map(hex, encrypt(dataStr))))


if __name__=='__main__':
	if(len(sys.argv) != 2):
		print "Usage: "+sys.argv[0]+" plaintext"
		exit(0)

	ciphertext = sys.argv[1]
	print "=== ciphertext ==="
	print ciphertext
	print "=== EncryptHexa(ciphertext) ==="
	print encryptHexa(ciphertext)
	print "=== Decrypt(Encrypt(ciphertext)) ==="
	print decrypt(encrypt(ciphertext))
